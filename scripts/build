#!/bin/bash
set -e

source $(dirname $0)/version

cd $(dirname $0)/..

mkdir -p bin

LINKFLAGS="-X github.com/rancher/drone-docker-image-digests.Version=$VERSION"
LINKFLAGS="-X github.com/rancher/drone-docker-image-digests.GitCommit=$COMMIT $LINKFLAGS"
LINKFLAGS="-s -w $LINKFLAGS"
OTHER_LINKFLAGS="-extldflags -static"

function build-binaries() {
    printf "Building for ${1}-${2} ...\n"
    TEMP_GOARM=""
    if [ $1 = "arm" ]; then
        # The whitespace is intentional.
        TEMP_GOARM=" GOARM=7"
    fi
    TEMP_LINKFLAGS=$LINKFLAGS
    if [ $1 = "linux" ]; then
        TEMP_LINKFLAGS="$LINKFLAGS $OTHER_LINKFLAGS"
    fi
    TEMP_SUFFIX=""
    if [ $1 = "windows" ]; then
        TEMP_SUFFIX=".exe"
    fi
    GOOS=${1} GOARCH=${2}${TEMP_GOARCH} CGO_ENABLED=0 go build -ldflags "$TEMP_LINKFLAGS" -o bin/drone-docker-image-digests-${1}-${2}${TEMP_SUFFIX}
}

if [ "$CROSS" = "true" ]; then
    # If local (host) is unset, we default to false since we are already cross-compiling for all platforms.
    if [ -z "$LOCAL" ]; then
        LOCAL="false"
    fi
    #OS_ARCH=( "linux amd64" "linux arm" "linux arm64" "darwin amd64" "windows amd64" )
    OS_ARCH=( "linux amd64" "linux arm64" "darwin amd64" "windows amd64" )
    for i in "${OS_ARCH[@]}"; do
        set -- $i
        build-binaries ${1} ${2}
    done
elif [ "$CROSS" = "windows" ]; then
   build-binaries "windows" "amd64"
fi

# Always build for the host (local) OS and ARCH unless otherwise specified (setting LOCAL to "false").
# LOCAL will be set to "false" if CROSS is "true" (avoids compiling the host OS and ARCH twice).
if ! [ "$LOCAL" = "false" ]; then
    build-binaries ${OS} ${ARCH}
fi

mkdir -p dist/artifacts
cp -r bin/drone-docker-image-digests* dist/artifacts/
